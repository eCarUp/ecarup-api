@page "/"
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.WebUtilities
@using ecarupGrpcWebExample.Contract.Authentication;
@using ecarupGrpcWebExample.Contract.ecarup
@inject IAuthService AuthService
@inject AuthStateProvider AuthProvider
@inject IConnectorService ConnectorsServiceFacade

<PageTitle>ecarup Connectors</PageTitle>


<MudContainer>  

    <AuthorizeView>
        <NotAuthorized>
            <MudText Typo="Typo.h3">Please login</MudText>
        </NotAuthorized>

        <Authorized>
            <MudText Typo="Typo.h3">ecarup connectors</MudText>

            <MudTable Items="@Connectors" Context="connector" Hover="true" Loading="@_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Station Name</MudTh>
                    <MudTh>Connector Name</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="StationName">@connector.StationName</MudTd>
                    <MudTd DataLabel="ConnectorName">@connector.ConnectorName</MudTd>
                </RowTemplate>               
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"/>
                </PagerContent>
            </MudTable>


            <MudText Typo="Typo.h3">Active chargings</MudText>
            <MudTable Items="@ActiveChargings" Context="charging" Hover="true" Loading="@_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Station</MudTh>
                    <MudTh>DriverIdentifier</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Duration (s)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Station">@GetConnectorName(charging)</MudTd>
                    <MudTd DataLabel="DriverIdentifier">@charging.DriverIdentifier</MudTd>
                    <MudTd DataLabel="Status">@charging.Status</MudTd>
                    <MudTd DataLabel="Duration">@charging.Duration.Seconds</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }" />
                </PagerContent>
            </MudTable>

        </Authorized>
    </AuthorizeView>
</MudContainer>



@code {
    private IEnumerable<ConnectorDto> Connectors = new List<ConnectorDto>();
    private List<ActiveChargingDto> ActiveChargings = new List<ActiveChargingDto>();

    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await LoadStations();
        _loading = false;
    }

    private async Task LoadStations()
    {
        Connectors = await ConnectorsServiceFacade.GetAll();
        await LoadActiveChargingsForConnectors();
    }

    private string GetConnectorName(ActiveChargingDto activeChargingDto)
    {
        var connector = Connectors.FirstOrDefault(c => 
            c.StationId == activeChargingDto.StationId &&
            c.ConnectorId == activeChargingDto.ConnectorId);
        return $"{connector?.StationName} {connector?.ConnectorName}";
    }


    private async Task LoadActiveChargingsForConnectors()
    {
        foreach (var connector in Connectors)
        {
            try
            {
                var request = new GetActiveChargingRequestDto
                    {
                        StationId = connector.StationId,
                        ConnectorId = connector.ConnectorId
                    };

                var activeChargings = await ConnectorsServiceFacade.GetActiveChargingForConnector(request);
                ActiveChargings.Add(activeChargings);
            }
            catch (Exception)
            {
                // Ignore the exception here. It will throw one if we don't have a charging for the connector
            }
        }
    }
}
    
